/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.company.resume.panel;

import com.company.resume.config.Config;
import com.mycompany.dao.inter.SkillDaoInter;
import com.mycompany.dao.inter.UserSkillDaoInter;
import com.mycompany.entity.Skill;
import com.mycompany.entity.UserSkill;
import com.mycompany.main.Context;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author USER
 */
public class SkillsPanel extends javax.swing.JPanel {

    private SkillDaoInter skillDao = Context.instanceSkillDao();
    private UserSkillDaoInter userSkillDao = Context.instanceUserSkillDao();
    private List<UserSkill> userSkills;
    private List<Skill> skills;

    /**
     * Creates new form SkillsPanel
     */
    public SkillsPanel() {
        initComponents();
    }

    private void fillWindow() {
        cbSkill.removeAllItems();
        txtSkillName.setText(null);

        skills = skillDao.getAll();
        for (Skill skill : skills) {
            cbSkill.addItem(skill);
        }
        fillTable();
    }

    private void fillTable() {
        userSkills = userSkillDao.getAllUserSkillByUserId(Config.loggedInUser.getId());

        // Rows of table
        Vector<Vector<Object>> rows = new Vector<>();
        for (UserSkill userSkill : userSkills) {
            Vector<Object> row = new Vector<>();
            row.add(userSkill.getSkill());
            row.add(userSkill.getPower());
            rows.add(row);
        }

        // Columns of table
        Vector<String> columns = new Vector<>();
        columns.add("Skill");
        columns.add("Power");

        // create table model
        DefaultTableModel model = new DefaultTableModel(rows, columns);

        //<editor-fold defaultstate="collapsed" desc="Another approach:">
        // Rows of table
//        Object[][] rows = new Object[userSkills.size()][2];
//        for (int i = 0; i < rows.length; i++) {
//            UserSkill userSkill = userSkills.get(i);
//            rows[i][0] = userSkill.getSkill();
//            rows[i][1] = userSkill.getPower();
//        }
        // Columns of table
//        String[] columns = new String[]{"Skill", "Power"};
        // Creating table model
//        DefaultTableModel model = new DefaultTableModel(rows, columns);
        //</editor-fold>
        tblSkills.setModel(model);
    }

    public void fillUserComponents() {
        fillWindow();
    }

    private boolean isSkillExist(Skill s) {
        for (Skill skill : skills) {
            if (skill.getName().equalsIgnoreCase(s.getName())) {
                return true;
            }
        }
        return false;
    }

    private boolean isUserSkillExist(UserSkill us) {
        for (UserSkill userSkill : userSkills) {
            if (userSkill.getSkill().getName().equalsIgnoreCase(us.getSkill().getName())) {
                return true;
            }
        }
        return false;
    }

    private Skill getCorrectSkill(Skill s) {
        for (Skill skill : skills) {
            if (skill.getName().equalsIgnoreCase(s.getName())) {
                return skill;
            }
        }
        return s;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblSkills = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        lblSkill = new javax.swing.JLabel();
        txtSkillName = new javax.swing.JTextField();
        sliderPower = new javax.swing.JSlider();
        lblPower = new javax.swing.JLabel();
        cbSkill = new javax.swing.JComboBox<>();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();

        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        tblSkills.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblSkills.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSkillsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblSkills);

        lblSkill.setText("Skill");

        sliderPower.setMajorTickSpacing(1);
        sliderPower.setMaximum(10);
        sliderPower.setMinimum(1);
        sliderPower.setPaintLabels(true);
        sliderPower.setPaintTicks(true);
        sliderPower.setValue(1);
        sliderPower.setPreferredSize(new java.awt.Dimension(200, 46));

        lblPower.setText("Power");

        btnAdd.setText("+");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setText("-");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblPower, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sliderPower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblSkill, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbSkill, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtSkillName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblSkill, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbSkill, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtSkillName))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sliderPower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lblPower, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnDelete)
                    .addComponent(btnUpdate))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 758, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        String skillName = txtSkillName.getText().trim();
        Skill skillNew;

        if (skillName != null && !skillName.isEmpty()) {
            skillNew = new Skill(null, skillName);
            if (isSkillExist(skillNew)) {
                skillNew = getCorrectSkill(skillNew);
            } else {
                skillDao.insertSkill(skillNew);
            }
        } else {
            skillNew = (Skill) cbSkill.getSelectedItem();
        }

        int power = sliderPower.getValue();

        UserSkill userSkill = new UserSkill(null, Config.loggedInUser, skillNew, power);

        if (isUserSkillExist(userSkill)) {
            JOptionPane.showMessageDialog(jPanel1, skillNew + " is alredy added!",
                    "Attention!", JOptionPane.INFORMATION_MESSAGE);
            txtSkillName.setText(null);
            return;
        }
        userSkillDao.insertUserSkill(userSkill);
        fillWindow();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // It is deleted from table and also db without save button.
        // It must be deleted only from table without save button.
        int index = tblSkills.getSelectedRow();
        if (index != -1) {
            UserSkill userSkill = userSkills.get(index);
            userSkillDao.removeUserSkill(userSkill.getId());
            fillTable();
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int index = tblSkills.getSelectedRow();
        if (index != -1) {
            UserSkill selectedUserSkill = userSkills.get(index);

            String skillName = txtSkillName.getText().trim();
            Skill skillNew;

            if (skillName != null && !skillName.isEmpty()) {
                skillNew = new Skill(null, skillName);
                if (isSkillExist(skillNew)) {
                    skillNew = getCorrectSkill(skillNew);
                } else {
                    skillDao.insertSkill(skillNew);
                }
            } else {
                skillNew = (Skill) cbSkill.getSelectedItem();
            }

            int power = sliderPower.getValue();

            UserSkill updatedUserSkill = new UserSkill();
            updatedUserSkill.setId(selectedUserSkill.getId());
            updatedUserSkill.setUser(selectedUserSkill.getUser());
            updatedUserSkill.setSkill(skillNew);
            updatedUserSkill.setPower(power);

            if (isUserSkillExist(updatedUserSkill)) {
                if (!skillNew.getName().equalsIgnoreCase(selectedUserSkill.getSkill().getName())) {
                    JOptionPane.showMessageDialog(jPanel1, skillNew + " is alredy added!",
                            "Attention!", JOptionPane.INFORMATION_MESSAGE);
                    txtSkillName.setText(null);
                    return;
                }
            }
            userSkillDao.updateUserSkill(updatedUserSkill);
            fillWindow();
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void tblSkillsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSkillsMouseClicked
        int index = tblSkills.getSelectedRow();
        UserSkill selectedUserSkill = userSkills.get(index);
        
        String selectedUserSkillName = selectedUserSkill.getSkill().getName();
        int i = 0;
        for (; i < skills.size(); i++) {
            Skill skill = skills.get(i);
            if (skill.getName().equalsIgnoreCase(selectedUserSkillName)) {
                break;
            }
        }
        cbSkill.setSelectedIndex(i);
        sliderPower.setValue(selectedUserSkill.getPower());
    }//GEN-LAST:event_tblSkillsMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<Skill> cbSkill;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPower;
    private javax.swing.JLabel lblSkill;
    private javax.swing.JSlider sliderPower;
    private javax.swing.JTable tblSkills;
    private javax.swing.JTextField txtSkillName;
    // End of variables declaration//GEN-END:variables
}
